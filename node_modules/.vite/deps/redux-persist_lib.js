import {
  __commonJS
} from "./chunk-5WRI5ZAA.js";

// node_modules/redux-persist/lib/constants.js
var require_constants = __commonJS({
  "node_modules/redux-persist/lib/constants.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.DEFAULT_VERSION = exports.REGISTER = exports.PURGE = exports.PERSIST = exports.PAUSE = exports.REHYDRATE = exports.FLUSH = exports.KEY_PREFIX = void 0;
    var KEY_PREFIX = "persist:";
    exports.KEY_PREFIX = KEY_PREFIX;
    var FLUSH = "persist/FLUSH";
    exports.FLUSH = FLUSH;
    var REHYDRATE = "persist/REHYDRATE";
    exports.REHYDRATE = REHYDRATE;
    var PAUSE = "persist/PAUSE";
    exports.PAUSE = PAUSE;
    var PERSIST = "persist/PERSIST";
    exports.PERSIST = PERSIST;
    var PURGE = "persist/PURGE";
    exports.PURGE = PURGE;
    var REGISTER = "persist/REGISTER";
    exports.REGISTER = REGISTER;
    var DEFAULT_VERSION = -1;
    exports.DEFAULT_VERSION = DEFAULT_VERSION;
  }
});

// node_modules/redux-persist/lib/stateReconciler/autoMergeLevel1.js
var require_autoMergeLevel1 = __commonJS({
  "node_modules/redux-persist/lib/stateReconciler/autoMergeLevel1.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = autoMergeLevel1;
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(source, true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(source).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function autoMergeLevel1(inboundState, originalState, reducedState, _ref) {
      var debug = _ref.debug;
      var newState = _objectSpread({}, reducedState);
      if (inboundState && _typeof(inboundState) === "object") {
        Object.keys(inboundState).forEach(function(key) {
          if (key === "_persist") return;
          if (originalState[key] !== reducedState[key]) {
            if (debug) console.log("redux-persist/stateReconciler: sub state for key `%s` modified, skipping.", key);
            return;
          }
          newState[key] = inboundState[key];
        });
      }
      if (debug && inboundState && _typeof(inboundState) === "object") console.log("redux-persist/stateReconciler: rehydrated keys '".concat(Object.keys(inboundState).join(", "), "'"));
      return newState;
    }
  }
});

// node_modules/redux-persist/lib/createPersistoid.js
var require_createPersistoid = __commonJS({
  "node_modules/redux-persist/lib/createPersistoid.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = createPersistoid;
    var _constants = require_constants();
    function createPersistoid(config) {
      var blacklist = config.blacklist || null;
      var whitelist = config.whitelist || null;
      var transforms = config.transforms || [];
      var throttle = config.throttle || 0;
      var storageKey = "".concat(config.keyPrefix !== void 0 ? config.keyPrefix : _constants.KEY_PREFIX).concat(config.key);
      var storage = config.storage;
      var serialize;
      if (config.serialize === false) {
        serialize = function serialize2(x) {
          return x;
        };
      } else if (typeof config.serialize === "function") {
        serialize = config.serialize;
      } else {
        serialize = defaultSerialize;
      }
      var writeFailHandler = config.writeFailHandler || null;
      var lastState = {};
      var stagedState = {};
      var keysToProcess = [];
      var timeIterator = null;
      var writePromise = null;
      var update = function update2(state) {
        Object.keys(state).forEach(function(key) {
          if (!passWhitelistBlacklist(key)) return;
          if (lastState[key] === state[key]) return;
          if (keysToProcess.indexOf(key) !== -1) return;
          keysToProcess.push(key);
        });
        Object.keys(lastState).forEach(function(key) {
          if (state[key] === void 0 && passWhitelistBlacklist(key) && keysToProcess.indexOf(key) === -1 && lastState[key] !== void 0) {
            keysToProcess.push(key);
          }
        });
        if (timeIterator === null) {
          timeIterator = setInterval(processNextKey, throttle);
        }
        lastState = state;
      };
      function processNextKey() {
        if (keysToProcess.length === 0) {
          if (timeIterator) clearInterval(timeIterator);
          timeIterator = null;
          return;
        }
        var key = keysToProcess.shift();
        var endState = transforms.reduce(function(subState, transformer) {
          return transformer.in(subState, key, lastState);
        }, lastState[key]);
        if (endState !== void 0) {
          try {
            stagedState[key] = serialize(endState);
          } catch (err) {
            console.error("redux-persist/createPersistoid: error serializing state", err);
          }
        } else {
          delete stagedState[key];
        }
        if (keysToProcess.length === 0) {
          writeStagedState();
        }
      }
      function writeStagedState() {
        Object.keys(stagedState).forEach(function(key) {
          if (lastState[key] === void 0) {
            delete stagedState[key];
          }
        });
        writePromise = storage.setItem(storageKey, serialize(stagedState)).catch(onWriteFail);
      }
      function passWhitelistBlacklist(key) {
        if (whitelist && whitelist.indexOf(key) === -1 && key !== "_persist") return false;
        if (blacklist && blacklist.indexOf(key) !== -1) return false;
        return true;
      }
      function onWriteFail(err) {
        if (writeFailHandler) writeFailHandler(err);
        if (err && true) {
          console.error("Error storing data", err);
        }
      }
      var flush = function flush2() {
        while (keysToProcess.length !== 0) {
          processNextKey();
        }
        return writePromise || Promise.resolve();
      };
      return {
        update,
        flush
      };
    }
    function defaultSerialize(data) {
      return JSON.stringify(data);
    }
  }
});

// node_modules/redux-persist/lib/getStoredState.js
var require_getStoredState = __commonJS({
  "node_modules/redux-persist/lib/getStoredState.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = getStoredState;
    var _constants = require_constants();
    function getStoredState(config) {
      var transforms = config.transforms || [];
      var storageKey = "".concat(config.keyPrefix !== void 0 ? config.keyPrefix : _constants.KEY_PREFIX).concat(config.key);
      var storage = config.storage;
      var debug = config.debug;
      var deserialize;
      if (config.deserialize === false) {
        deserialize = function deserialize2(x) {
          return x;
        };
      } else if (typeof config.deserialize === "function") {
        deserialize = config.deserialize;
      } else {
        deserialize = defaultDeserialize;
      }
      return storage.getItem(storageKey).then(function(serialized) {
        if (!serialized) return void 0;
        else {
          try {
            var state = {};
            var rawState = deserialize(serialized);
            Object.keys(rawState).forEach(function(key) {
              state[key] = transforms.reduceRight(function(subState, transformer) {
                return transformer.out(subState, key, rawState);
              }, deserialize(rawState[key]));
            });
            return state;
          } catch (err) {
            if (debug) console.log("redux-persist/getStoredState: Error restoring data ".concat(serialized), err);
            throw err;
          }
        }
      });
    }
    function defaultDeserialize(serial) {
      return JSON.parse(serial);
    }
  }
});

// node_modules/redux-persist/lib/purgeStoredState.js
var require_purgeStoredState = __commonJS({
  "node_modules/redux-persist/lib/purgeStoredState.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = purgeStoredState;
    var _constants = require_constants();
    function purgeStoredState(config) {
      var storage = config.storage;
      var storageKey = "".concat(config.keyPrefix !== void 0 ? config.keyPrefix : _constants.KEY_PREFIX).concat(config.key);
      return storage.removeItem(storageKey, warnIfRemoveError);
    }
    function warnIfRemoveError(err) {
      if (err && true) {
        console.error("redux-persist/purgeStoredState: Error purging data stored state", err);
      }
    }
  }
});

// node_modules/redux-persist/lib/persistReducer.js
var require_persistReducer = __commonJS({
  "node_modules/redux-persist/lib/persistReducer.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = persistReducer;
    var _constants = require_constants();
    var _autoMergeLevel = _interopRequireDefault(require_autoMergeLevel1());
    var _createPersistoid = _interopRequireDefault(require_createPersistoid());
    var _getStoredState = _interopRequireDefault(require_getStoredState());
    var _purgeStoredState = _interopRequireDefault(require_purgeStoredState());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(source, true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(source).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    var DEFAULT_TIMEOUT = 5e3;
    function persistReducer(config, baseReducer) {
      if (true) {
        if (!config) throw new Error("config is required for persistReducer");
        if (!config.key) throw new Error("key is required in persistor config");
        if (!config.storage) throw new Error("redux-persist: config.storage is required. Try using one of the provided storage engines `import storage from 'redux-persist/lib/storage'`");
      }
      var version = config.version !== void 0 ? config.version : _constants.DEFAULT_VERSION;
      var debug = config.debug || false;
      var stateReconciler = config.stateReconciler === void 0 ? _autoMergeLevel.default : config.stateReconciler;
      var getStoredState = config.getStoredState || _getStoredState.default;
      var timeout = config.timeout !== void 0 ? config.timeout : DEFAULT_TIMEOUT;
      var _persistoid = null;
      var _purge = false;
      var _paused = true;
      var conditionalUpdate = function conditionalUpdate2(state) {
        state._persist.rehydrated && _persistoid && !_paused && _persistoid.update(state);
        return state;
      };
      return function(state, action) {
        var _ref = state || {}, _persist = _ref._persist, rest = _objectWithoutProperties(_ref, ["_persist"]);
        var restState = rest;
        if (action.type === _constants.PERSIST) {
          var _sealed = false;
          var _rehydrate = function _rehydrate2(payload, err) {
            if (_sealed) console.error('redux-persist: rehydrate for "'.concat(config.key, '" called after timeout.'), payload, err);
            if (!_sealed) {
              action.rehydrate(config.key, payload, err);
              _sealed = true;
            }
          };
          timeout && setTimeout(function() {
            !_sealed && _rehydrate(void 0, new Error('redux-persist: persist timed out for persist key "'.concat(config.key, '"')));
          }, timeout);
          _paused = false;
          if (!_persistoid) _persistoid = (0, _createPersistoid.default)(config);
          if (_persist) {
            return _objectSpread({}, baseReducer(restState, action), {
              _persist
            });
          }
          if (typeof action.rehydrate !== "function" || typeof action.register !== "function") throw new Error("redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.");
          action.register(config.key);
          getStoredState(config).then(function(restoredState) {
            var migrate = config.migrate || function(s, v) {
              return Promise.resolve(s);
            };
            migrate(restoredState, version).then(function(migratedState) {
              _rehydrate(migratedState);
            }, function(migrateErr) {
              if (migrateErr) console.error("redux-persist: migration error", migrateErr);
              _rehydrate(void 0, migrateErr);
            });
          }, function(err) {
            _rehydrate(void 0, err);
          });
          return _objectSpread({}, baseReducer(restState, action), {
            _persist: {
              version,
              rehydrated: false
            }
          });
        } else if (action.type === _constants.PURGE) {
          _purge = true;
          action.result((0, _purgeStoredState.default)(config));
          return _objectSpread({}, baseReducer(restState, action), {
            _persist
          });
        } else if (action.type === _constants.FLUSH) {
          action.result(_persistoid && _persistoid.flush());
          return _objectSpread({}, baseReducer(restState, action), {
            _persist
          });
        } else if (action.type === _constants.PAUSE) {
          _paused = true;
        } else if (action.type === _constants.REHYDRATE) {
          if (_purge) return _objectSpread({}, restState, {
            _persist: _objectSpread({}, _persist, {
              rehydrated: true
            })
            // @NOTE if key does not match, will continue to default else below
          });
          if (action.key === config.key) {
            var reducedState = baseReducer(restState, action);
            var inboundState = action.payload;
            var reconciledRest = stateReconciler !== false && inboundState !== void 0 ? stateReconciler(inboundState, state, reducedState, config) : reducedState;
            var _newState = _objectSpread({}, reconciledRest, {
              _persist: _objectSpread({}, _persist, {
                rehydrated: true
              })
            });
            return conditionalUpdate(_newState);
          }
        }
        if (!_persist) return baseReducer(state, action);
        var newState = baseReducer(restState, action);
        if (newState === restState) return state;
        return conditionalUpdate(_objectSpread({}, newState, {
          _persist
        }));
      };
    }
  }
});

// node_modules/redux/dist/cjs/redux.cjs
var require_redux = __commonJS({
  "node_modules/redux/dist/cjs/redux.cjs"(exports, module) {
    "use strict";
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export(src_exports, {
      __DO_NOT_USE__ActionTypes: () => actionTypes_default,
      applyMiddleware: () => applyMiddleware,
      bindActionCreators: () => bindActionCreators,
      combineReducers: () => combineReducers,
      compose: () => compose,
      createStore: () => createStore,
      isAction: () => isAction,
      isPlainObject: () => isPlainObject,
      legacy_createStore: () => legacy_createStore
    });
    module.exports = __toCommonJS(src_exports);
    var $$observable = (() => typeof Symbol === "function" && Symbol.observable || "@@observable")();
    var symbol_observable_default = $$observable;
    var randomString = () => Math.random().toString(36).substring(7).split("").join(".");
    var ActionTypes = {
      INIT: `@@redux/INIT${randomString()}`,
      REPLACE: `@@redux/REPLACE${randomString()}`,
      PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`
    };
    var actionTypes_default = ActionTypes;
    function isPlainObject(obj) {
      if (typeof obj !== "object" || obj === null)
        return false;
      let proto = obj;
      while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
      }
      return Object.getPrototypeOf(obj) === proto || Object.getPrototypeOf(obj) === null;
    }
    function miniKindOf(val) {
      if (val === void 0)
        return "undefined";
      if (val === null)
        return "null";
      const type = typeof val;
      switch (type) {
        case "boolean":
        case "string":
        case "number":
        case "symbol":
        case "function": {
          return type;
        }
      }
      if (Array.isArray(val))
        return "array";
      if (isDate(val))
        return "date";
      if (isError(val))
        return "error";
      const constructorName = ctorName(val);
      switch (constructorName) {
        case "Symbol":
        case "Promise":
        case "WeakMap":
        case "WeakSet":
        case "Map":
        case "Set":
          return constructorName;
      }
      return Object.prototype.toString.call(val).slice(8, -1).toLowerCase().replace(/\s/g, "");
    }
    function ctorName(val) {
      return typeof val.constructor === "function" ? val.constructor.name : null;
    }
    function isError(val) {
      return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
    }
    function isDate(val) {
      if (val instanceof Date)
        return true;
      return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
    }
    function kindOf(val) {
      let typeOfVal = typeof val;
      if (true) {
        typeOfVal = miniKindOf(val);
      }
      return typeOfVal;
    }
    function createStore(reducer, preloadedState, enhancer) {
      if (typeof reducer !== "function") {
        throw new Error(false ? formatProdErrorMessage(2) : `Expected the root reducer to be a function. Instead, received: '${kindOf(reducer)}'`);
      }
      if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
        throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
      }
      if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
        enhancer = preloadedState;
        preloadedState = void 0;
      }
      if (typeof enhancer !== "undefined") {
        if (typeof enhancer !== "function") {
          throw new Error(false ? formatProdErrorMessage(1) : `Expected the enhancer to be a function. Instead, received: '${kindOf(enhancer)}'`);
        }
        return enhancer(createStore)(reducer, preloadedState);
      }
      let currentReducer = reducer;
      let currentState = preloadedState;
      let currentListeners = /* @__PURE__ */ new Map();
      let nextListeners = currentListeners;
      let listenerIdCounter = 0;
      let isDispatching = false;
      function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) {
          nextListeners = /* @__PURE__ */ new Map();
          currentListeners.forEach((listener, key) => {
            nextListeners.set(key, listener);
          });
        }
      }
      function getState() {
        if (isDispatching) {
          throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
        }
        return currentState;
      }
      function subscribe(listener) {
        if (typeof listener !== "function") {
          throw new Error(false ? formatProdErrorMessage(4) : `Expected the listener to be a function. Instead, received: '${kindOf(listener)}'`);
        }
        if (isDispatching) {
          throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        let isSubscribed = true;
        ensureCanMutateNextListeners();
        const listenerId = listenerIdCounter++;
        nextListeners.set(listenerId, listener);
        return function unsubscribe() {
          if (!isSubscribed) {
            return;
          }
          if (isDispatching) {
            throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
          }
          isSubscribed = false;
          ensureCanMutateNextListeners();
          nextListeners.delete(listenerId);
          currentListeners = null;
        };
      }
      function dispatch(action) {
        if (!isPlainObject(action)) {
          throw new Error(false ? formatProdErrorMessage(7) : `Actions must be plain objects. Instead, the actual type was: '${kindOf(action)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
        }
        if (typeof action.type === "undefined") {
          throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
        }
        if (typeof action.type !== "string") {
          throw new Error(false ? formatProdErrorMessage(17) : `Action "type" property must be a string. Instead, the actual type was: '${kindOf(action.type)}'. Value was: '${action.type}' (stringified)`);
        }
        if (isDispatching) {
          throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
        }
        try {
          isDispatching = true;
          currentState = currentReducer(currentState, action);
        } finally {
          isDispatching = false;
        }
        const listeners = currentListeners = nextListeners;
        listeners.forEach((listener) => {
          listener();
        });
        return action;
      }
      function replaceReducer(nextReducer) {
        if (typeof nextReducer !== "function") {
          throw new Error(false ? formatProdErrorMessage(10) : `Expected the nextReducer to be a function. Instead, received: '${kindOf(nextReducer)}`);
        }
        currentReducer = nextReducer;
        dispatch({
          type: actionTypes_default.REPLACE
        });
      }
      function observable() {
        const outerSubscribe = subscribe;
        return {
          /**
           * The minimal observable subscription method.
           * @param observer Any object that can be used as an observer.
           * The observer object should have a `next` method.
           * @returns An object with an `unsubscribe` method that can
           * be used to unsubscribe the observable from the store, and prevent further
           * emission of values from the observable.
           */
          subscribe(observer) {
            if (typeof observer !== "object" || observer === null) {
              throw new Error(false ? formatProdErrorMessage(11) : `Expected the observer to be an object. Instead, received: '${kindOf(observer)}'`);
            }
            function observeState() {
              const observerAsObserver = observer;
              if (observerAsObserver.next) {
                observerAsObserver.next(getState());
              }
            }
            observeState();
            const unsubscribe = outerSubscribe(observeState);
            return {
              unsubscribe
            };
          },
          [symbol_observable_default]() {
            return this;
          }
        };
      }
      dispatch({
        type: actionTypes_default.INIT
      });
      const store = {
        dispatch,
        subscribe,
        getState,
        replaceReducer,
        [symbol_observable_default]: observable
      };
      return store;
    }
    function legacy_createStore(reducer, preloadedState, enhancer) {
      return createStore(reducer, preloadedState, enhancer);
    }
    function warning(message) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
    function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
      const reducerKeys = Object.keys(reducers);
      const argumentName = action && action.type === actionTypes_default.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
      if (reducerKeys.length === 0) {
        return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
      }
      if (!isPlainObject(inputState)) {
        return `The ${argumentName} has unexpected type of "${kindOf(inputState)}". Expected argument to be an object with the following keys: "${reducerKeys.join('", "')}"`;
      }
      const unexpectedKeys = Object.keys(inputState).filter((key) => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]);
      unexpectedKeys.forEach((key) => {
        unexpectedKeyCache[key] = true;
      });
      if (action && action.type === actionTypes_default.REPLACE)
        return;
      if (unexpectedKeys.length > 0) {
        return `Unexpected ${unexpectedKeys.length > 1 ? "keys" : "key"} "${unexpectedKeys.join('", "')}" found in ${argumentName}. Expected to find one of the known reducer keys instead: "${reducerKeys.join('", "')}". Unexpected keys will be ignored.`;
      }
    }
    function assertReducerShape(reducers) {
      Object.keys(reducers).forEach((key) => {
        const reducer = reducers[key];
        const initialState = reducer(void 0, {
          type: actionTypes_default.INIT
        });
        if (typeof initialState === "undefined") {
          throw new Error(false ? formatProdErrorMessage(12) : `The slice reducer for key "${key}" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
        }
        if (typeof reducer(void 0, {
          type: actionTypes_default.PROBE_UNKNOWN_ACTION()
        }) === "undefined") {
          throw new Error(false ? formatProdErrorMessage(13) : `The slice reducer for key "${key}" returned undefined when probed with a random type. Don't try to handle '${actionTypes_default.INIT}' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
        }
      });
    }
    function combineReducers(reducers) {
      const reducerKeys = Object.keys(reducers);
      const finalReducers = {};
      for (let i = 0; i < reducerKeys.length; i++) {
        const key = reducerKeys[i];
        if (true) {
          if (typeof reducers[key] === "undefined") {
            warning(`No reducer provided for key "${key}"`);
          }
        }
        if (typeof reducers[key] === "function") {
          finalReducers[key] = reducers[key];
        }
      }
      const finalReducerKeys = Object.keys(finalReducers);
      let unexpectedKeyCache;
      if (true) {
        unexpectedKeyCache = {};
      }
      let shapeAssertionError;
      try {
        assertReducerShape(finalReducers);
      } catch (e) {
        shapeAssertionError = e;
      }
      return function combination(state = {}, action) {
        if (shapeAssertionError) {
          throw shapeAssertionError;
        }
        if (true) {
          const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
          if (warningMessage) {
            warning(warningMessage);
          }
        }
        let hasChanged = false;
        const nextState = {};
        for (let i = 0; i < finalReducerKeys.length; i++) {
          const key = finalReducerKeys[i];
          const reducer = finalReducers[key];
          const previousStateForKey = state[key];
          const nextStateForKey = reducer(previousStateForKey, action);
          if (typeof nextStateForKey === "undefined") {
            const actionType = action && action.type;
            throw new Error(false ? formatProdErrorMessage(14) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
          }
          nextState[key] = nextStateForKey;
          hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
      };
    }
    function bindActionCreator(actionCreator, dispatch) {
      return function(...args) {
        return dispatch(actionCreator.apply(this, args));
      };
    }
    function bindActionCreators(actionCreators, dispatch) {
      if (typeof actionCreators === "function") {
        return bindActionCreator(actionCreators, dispatch);
      }
      if (typeof actionCreators !== "object" || actionCreators === null) {
        throw new Error(false ? formatProdErrorMessage(16) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
      }
      const boundActionCreators = {};
      for (const key in actionCreators) {
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === "function") {
          boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
      }
      return boundActionCreators;
    }
    function compose(...funcs) {
      if (funcs.length === 0) {
        return (arg) => arg;
      }
      if (funcs.length === 1) {
        return funcs[0];
      }
      return funcs.reduce((a, b) => (...args) => a(b(...args)));
    }
    function applyMiddleware(...middlewares) {
      return (createStore2) => (reducer, preloadedState) => {
        const store = createStore2(reducer, preloadedState);
        let dispatch = () => {
          throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
        };
        const middlewareAPI = {
          getState: store.getState,
          dispatch: (action, ...args) => dispatch(action, ...args)
        };
        const chain = middlewares.map((middleware) => middleware(middlewareAPI));
        dispatch = compose(...chain)(store.dispatch);
        return {
          ...store,
          dispatch
        };
      };
    }
    function isAction(action) {
      return isPlainObject(action) && "type" in action && typeof action.type === "string";
    }
  }
});

// node_modules/redux-persist/lib/stateReconciler/autoMergeLevel2.js
var require_autoMergeLevel2 = __commonJS({
  "node_modules/redux-persist/lib/stateReconciler/autoMergeLevel2.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = autoMergeLevel2;
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(source, true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(source).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function autoMergeLevel2(inboundState, originalState, reducedState, _ref) {
      var debug = _ref.debug;
      var newState = _objectSpread({}, reducedState);
      if (inboundState && _typeof(inboundState) === "object") {
        Object.keys(inboundState).forEach(function(key) {
          if (key === "_persist") return;
          if (originalState[key] !== reducedState[key]) {
            if (debug) console.log("redux-persist/stateReconciler: sub state for key `%s` modified, skipping.", key);
            return;
          }
          if (isPlainEnoughObject(reducedState[key])) {
            newState[key] = _objectSpread({}, newState[key], {}, inboundState[key]);
            return;
          }
          newState[key] = inboundState[key];
        });
      }
      if (debug && inboundState && _typeof(inboundState) === "object") console.log("redux-persist/stateReconciler: rehydrated keys '".concat(Object.keys(inboundState).join(", "), "'"));
      return newState;
    }
    function isPlainEnoughObject(o) {
      return o !== null && !Array.isArray(o) && _typeof(o) === "object";
    }
  }
});

// node_modules/redux-persist/lib/persistCombineReducers.js
var require_persistCombineReducers = __commonJS({
  "node_modules/redux-persist/lib/persistCombineReducers.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = persistCombineReducers;
    var _redux = require_redux();
    var _persistReducer = _interopRequireDefault(require_persistReducer());
    var _autoMergeLevel = _interopRequireDefault(require_autoMergeLevel2());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function persistCombineReducers(config, reducers) {
      config.stateReconciler = config.stateReconciler === void 0 ? _autoMergeLevel.default : config.stateReconciler;
      return (0, _persistReducer.default)(config, (0, _redux.combineReducers)(reducers));
    }
  }
});

// node_modules/redux-persist/lib/persistStore.js
var require_persistStore = __commonJS({
  "node_modules/redux-persist/lib/persistStore.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = persistStore;
    var _redux = require_redux();
    var _constants = require_constants();
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }
    function _iterableToArray(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(source, true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(source).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var initialState = {
      registry: [],
      bootstrapped: false
    };
    var persistorReducer = function persistorReducer2() {
      var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : initialState;
      var action = arguments.length > 1 ? arguments[1] : void 0;
      switch (action.type) {
        case _constants.REGISTER:
          return _objectSpread({}, state, {
            registry: [].concat(_toConsumableArray(state.registry), [action.key])
          });
        case _constants.REHYDRATE:
          var firstIndex = state.registry.indexOf(action.key);
          var registry = _toConsumableArray(state.registry);
          registry.splice(firstIndex, 1);
          return _objectSpread({}, state, {
            registry,
            bootstrapped: registry.length === 0
          });
        default:
          return state;
      }
    };
    function persistStore(store, options, cb) {
      if (true) {
        var optionsToTest = options || {};
        var bannedKeys = ["blacklist", "whitelist", "transforms", "storage", "keyPrefix", "migrate"];
        bannedKeys.forEach(function(k) {
          if (!!optionsToTest[k]) console.error('redux-persist: invalid option passed to persistStore: "'.concat(k, '". You may be incorrectly passing persistConfig into persistStore, whereas it should be passed into persistReducer.'));
        });
      }
      var boostrappedCb = cb || false;
      var _pStore = (0, _redux.createStore)(persistorReducer, initialState, options && options.enhancer ? options.enhancer : void 0);
      var register = function register2(key) {
        _pStore.dispatch({
          type: _constants.REGISTER,
          key
        });
      };
      var rehydrate = function rehydrate2(key, payload, err) {
        var rehydrateAction = {
          type: _constants.REHYDRATE,
          payload,
          err,
          key
          // dispatch to `store` to rehydrate and `persistor` to track result
        };
        store.dispatch(rehydrateAction);
        _pStore.dispatch(rehydrateAction);
        if (boostrappedCb && persistor.getState().bootstrapped) {
          boostrappedCb();
          boostrappedCb = false;
        }
      };
      var persistor = _objectSpread({}, _pStore, {
        purge: function purge() {
          var results = [];
          store.dispatch({
            type: _constants.PURGE,
            result: function result(purgeResult) {
              results.push(purgeResult);
            }
          });
          return Promise.all(results);
        },
        flush: function flush() {
          var results = [];
          store.dispatch({
            type: _constants.FLUSH,
            result: function result(flushResult) {
              results.push(flushResult);
            }
          });
          return Promise.all(results);
        },
        pause: function pause() {
          store.dispatch({
            type: _constants.PAUSE
          });
        },
        persist: function persist() {
          store.dispatch({
            type: _constants.PERSIST,
            register,
            rehydrate
          });
        }
      });
      if (!(options && options.manualPersist)) {
        persistor.persist();
      }
      return persistor;
    }
  }
});

// node_modules/redux-persist/lib/createMigrate.js
var require_createMigrate = __commonJS({
  "node_modules/redux-persist/lib/createMigrate.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = createMigrate;
    var _constants = require_constants();
    function createMigrate(migrations, config) {
      var _ref = config || {}, debug = _ref.debug;
      return function(state, currentVersion) {
        if (!state) {
          if (debug) console.log("redux-persist: no inbound state, skipping migration");
          return Promise.resolve(void 0);
        }
        var inboundVersion = state._persist && state._persist.version !== void 0 ? state._persist.version : _constants.DEFAULT_VERSION;
        if (inboundVersion === currentVersion) {
          if (debug) console.log("redux-persist: versions match, noop migration");
          return Promise.resolve(state);
        }
        if (inboundVersion > currentVersion) {
          if (true) console.error("redux-persist: downgrading version is not supported");
          return Promise.resolve(state);
        }
        var migrationKeys = Object.keys(migrations).map(function(ver) {
          return parseInt(ver);
        }).filter(function(key) {
          return currentVersion >= key && key > inboundVersion;
        }).sort(function(a, b) {
          return a - b;
        });
        if (debug) console.log("redux-persist: migrationKeys", migrationKeys);
        try {
          var migratedState = migrationKeys.reduce(function(state2, versionKey) {
            if (debug) console.log("redux-persist: running migration for versionKey", versionKey);
            return migrations[versionKey](state2);
          }, state);
          return Promise.resolve(migratedState);
        } catch (err) {
          return Promise.reject(err);
        }
      };
    }
  }
});

// node_modules/redux-persist/lib/createTransform.js
var require_createTransform = __commonJS({
  "node_modules/redux-persist/lib/createTransform.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = createTransform;
    function createTransform(inbound, outbound) {
      var config = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var whitelist = config.whitelist || null;
      var blacklist = config.blacklist || null;
      function whitelistBlacklistCheck(key) {
        if (whitelist && whitelist.indexOf(key) === -1) return true;
        if (blacklist && blacklist.indexOf(key) !== -1) return true;
        return false;
      }
      return {
        in: function _in(state, key, fullState) {
          return !whitelistBlacklistCheck(key) && inbound ? inbound(state, key, fullState) : state;
        },
        out: function out(state, key, fullState) {
          return !whitelistBlacklistCheck(key) && outbound ? outbound(state, key, fullState) : state;
        }
      };
    }
  }
});

// node_modules/redux-persist/lib/index.js
var require_lib = __commonJS({
  "node_modules/redux-persist/lib/index.js"(exports) {
    exports.__esModule = true;
    var _exportNames = {
      persistReducer: true,
      persistCombineReducers: true,
      persistStore: true,
      createMigrate: true,
      createTransform: true,
      getStoredState: true,
      createPersistoid: true,
      purgeStoredState: true
    };
    exports.purgeStoredState = exports.createPersistoid = exports.getStoredState = exports.createTransform = exports.createMigrate = exports.persistStore = exports.persistCombineReducers = exports.persistReducer = void 0;
    var _persistReducer = _interopRequireDefault(require_persistReducer());
    exports.persistReducer = _persistReducer.default;
    var _persistCombineReducers = _interopRequireDefault(require_persistCombineReducers());
    exports.persistCombineReducers = _persistCombineReducers.default;
    var _persistStore = _interopRequireDefault(require_persistStore());
    exports.persistStore = _persistStore.default;
    var _createMigrate = _interopRequireDefault(require_createMigrate());
    exports.createMigrate = _createMigrate.default;
    var _createTransform = _interopRequireDefault(require_createTransform());
    exports.createTransform = _createTransform.default;
    var _getStoredState = _interopRequireDefault(require_getStoredState());
    exports.getStoredState = _getStoredState.default;
    var _createPersistoid = _interopRequireDefault(require_createPersistoid());
    exports.createPersistoid = _createPersistoid.default;
    var _purgeStoredState = _interopRequireDefault(require_purgeStoredState());
    exports.purgeStoredState = _purgeStoredState.default;
    var _constants = require_constants();
    Object.keys(_constants).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
      exports[key] = _constants[key];
    });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});
export default require_lib();
//# sourceMappingURL=redux-persist_lib.js.map
